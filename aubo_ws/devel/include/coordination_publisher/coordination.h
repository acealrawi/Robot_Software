// Generated by gencpp from file coordination_publisher/coordination.msg
// DO NOT EDIT!


#ifndef COORDINATION_PUBLISHER_MESSAGE_COORDINATION_H
#define COORDINATION_PUBLISHER_MESSAGE_COORDINATION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace coordination_publisher
{
template <class ContainerAllocator>
struct coordination_
{
  typedef coordination_<ContainerAllocator> Type;

  coordination_()
    : aX(0.0)
    , aY(0.0)
    , aZ(0.0)  {
    }
  coordination_(const ContainerAllocator& _alloc)
    : aX(0.0)
    , aY(0.0)
    , aZ(0.0)  {
  (void)_alloc;
    }



   typedef float _aX_type;
  _aX_type aX;

   typedef float _aY_type;
  _aY_type aY;

   typedef float _aZ_type;
  _aZ_type aZ;





  typedef boost::shared_ptr< ::coordination_publisher::coordination_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::coordination_publisher::coordination_<ContainerAllocator> const> ConstPtr;

}; // struct coordination_

typedef ::coordination_publisher::coordination_<std::allocator<void> > coordination;

typedef boost::shared_ptr< ::coordination_publisher::coordination > coordinationPtr;
typedef boost::shared_ptr< ::coordination_publisher::coordination const> coordinationConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::coordination_publisher::coordination_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::coordination_publisher::coordination_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace coordination_publisher

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'coordination_publisher': ['/home/ali/Robot_Software/aubo_ws/src/coordination_publisher/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::coordination_publisher::coordination_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::coordination_publisher::coordination_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::coordination_publisher::coordination_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::coordination_publisher::coordination_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::coordination_publisher::coordination_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::coordination_publisher::coordination_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::coordination_publisher::coordination_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e9ad96bdd5cf5d5e53c59d1a240ad03f";
  }

  static const char* value(const ::coordination_publisher::coordination_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe9ad96bdd5cf5d5eULL;
  static const uint64_t static_value2 = 0x53c59d1a240ad03fULL;
};

template<class ContainerAllocator>
struct DataType< ::coordination_publisher::coordination_<ContainerAllocator> >
{
  static const char* value()
  {
    return "coordination_publisher/coordination";
  }

  static const char* value(const ::coordination_publisher::coordination_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::coordination_publisher::coordination_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 aX\n\
float32 aY\n\
float32 aZ\n\
";
  }

  static const char* value(const ::coordination_publisher::coordination_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::coordination_publisher::coordination_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.aX);
      stream.next(m.aY);
      stream.next(m.aZ);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct coordination_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::coordination_publisher::coordination_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::coordination_publisher::coordination_<ContainerAllocator>& v)
  {
    s << indent << "aX: ";
    Printer<float>::stream(s, indent + "  ", v.aX);
    s << indent << "aY: ";
    Printer<float>::stream(s, indent + "  ", v.aY);
    s << indent << "aZ: ";
    Printer<float>::stream(s, indent + "  ", v.aZ);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COORDINATION_PUBLISHER_MESSAGE_COORDINATION_H
